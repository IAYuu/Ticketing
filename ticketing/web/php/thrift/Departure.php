<?php
/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Departure
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'start',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'reach',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'price',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'start_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'reach_time',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $start = null;
    /**
     * @var string
     */
    public $reach = null;
    /**
     * @var double
     */
    public $price = null;
    /**
     * @var string
     */
    public $start_time = null;
    /**
     * @var string
     */
    public $reach_time = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['start'])) {
                $this->start = $vals['start'];
            }
            if (isset($vals['reach'])) {
                $this->reach = $vals['reach'];
            }
            if (isset($vals['price'])) {
                $this->price = $vals['price'];
            }
            if (isset($vals['start_time'])) {
                $this->start_time = $vals['start_time'];
            }
            if (isset($vals['reach_time'])) {
                $this->reach_time = $vals['reach_time'];
            }
        }
    }

    public function getName()
    {
        return 'Departure';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->start);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reach);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->start_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reach_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Departure');
        if ($this->start !== null) {
            $xfer += $output->writeFieldBegin('start', TType::STRING, 1);
            $xfer += $output->writeString($this->start);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reach !== null) {
            $xfer += $output->writeFieldBegin('reach', TType::STRING, 2);
            $xfer += $output->writeString($this->reach);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->price !== null) {
            $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start_time !== null) {
            $xfer += $output->writeFieldBegin('start_time', TType::STRING, 4);
            $xfer += $output->writeString($this->start_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reach_time !== null) {
            $xfer += $output->writeFieldBegin('reach_time', TType::STRING, 5);
            $xfer += $output->writeString($this->reach_time);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
